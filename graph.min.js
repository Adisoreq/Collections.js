class Graph{#a=new Map;constructor(){}#b(t,s){this.#a.has(t)||this.#a.set(t,new Set),this.#a.get(t).add(s),this.#a.has(s)||this.#a.set(s,new Set),this.#a.get(s).add(t)}addNode(t){this.#a.has(t)||this.#a.set(t,new Set)}addNodes(t=[]){for(let s=0;s<t.length;s++)for(let e=0;e<t.length;e++)s!==e&&this.#b(t[s],t[e])}clear(){this.#a.clear()}get length(){return this.#a.size}get isEmpty(){return 0===this.#a.size}getEdges(t){return this.#a.has(t)?[...this.#a.get(t)]:void 0}contains(t){return this.#a.has(t)}isOrphan(t){return this.contains(t)&&0===this.#a.get(t).size}isConnected(t,s){return this.#a.has(t)&&this.#a.get(t).has(s)}#c(e,h,i){for(let n of(h.add(e),i.push(e),this.#a.get(e)))h.has(n)||this.#c(n,h,i)}findConnectedComponents(){let t=new Set,s=[];for(let e of this.#a.keys())if(!t.has(e)){let h=[];this.#c(e,t,h),s.push(h)}return s}getComponent(t){for(let s of this.findConnectedComponents())if(s.includes(t))return s}}
