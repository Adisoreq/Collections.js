class BitArray{#t;#e;constructor(t){this.#e=t,this.clear()}setBit(t,e){if(t>=0&&t<this.#e){const i=Math.floor(t/8),s=t%8;e?this.#t[i]|=1<<s:this.#t[i]&=~(1<<s)}}set(t){this.setBit(t,!0)}reset(t){this.setBit(t,!1)}clear(){this.#t=new Uint8Array(Math.ceil(this.#e/8))}get(t){if(t>=0&&t<this.#e){const e=Math.floor(t/8),i=t%8;return 0!=(this.#t[e]&1<<i)}return!1}get length(){return this.#e}get isEmpty(){return 0===this.#e}values(){let t=[];for(let e=0;e<this.#e;e++)t.push(this.get(e));return t.map(Number)}display(){console.log(`BitArray (${this.#e}) {\n ${this.values().join(", ")} \n}`)}}