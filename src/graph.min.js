class Graph{#t=new Map;constructor(){}addEdge(t,e,s=!1){this.#t.has(t)||this.#t.set(t,new Set),this.#t.get(t).add(e),s&&(this.#t.has(e)||this.#t.set(e,new Set),this.#t.get(e).add(t))}addNode(t){this.#t.has(t)||this.#t.set(t,new Set)}addNodes(t=[],e=!1){for(let s=0;s<t.length;s++)for(let h=0;h<t.length;h++)s!==h&&e&&this.addEdge(t[s],t[h])}clear(){this.#t.clear()}get length(){return this.#t.size}get isEmpty(){return 0===this.#t.size}getEdges(t){return this.#t.has(t)?[...this.#t.get(t)]:void 0}contains(t){return this.#t.has(t)}isOrphan(t){return this.contains(t)&&0===this.#t.get(t).size}isConnected(t,e){return this.#t.has(t)&&this.#t.get(t).has(e)}#e(t,e,s){e.add(t),s.push(t);for(let h of this.#t.get(t))e.has(h)||this.#e(h,e,s)}findConnectedComponents(){let t=new Set,e=[];for(let s of this.#t.keys())if(!t.has(s)){let h=[];this.#e(s,t,h),e.push(h)}return e}getComponent(t){for(let e of this.findConnectedComponents())if(e.includes(t))return e}}